/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | foam-extend: Open Source CFD                    |
|  \\    /   O peration     | Version:     4.1                                |
|   \\  /    A nd           | Web:         http://www.foam-extend.org         |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

libs
(
    "liblduSolvers.so"
    "libPCM4Foam.so"
)

application     chtMultiRegion4PCMFoam;

startFrom       latestTime;

startTime       0;

stopAt          endTime;

endTime         10000;

deltaT          0.1;

writeControl    adjustableRunTime;

writeInterval   10;

purgeWrite      0;

writeFormat     ascii;

writePrecision  7;

writeCompression compressed;

timeFormat      general;

timePrecision   6;

runTimeModifiable yes;

maxCo           0.7;

adjustTimeStep  yes;

maxDeltaT	1.0;


InfoSwitches
{
    writePrecision  6;
    writeJobInfo    0;
    allowSystemOperations 1;
}

functions
(
    postProcessPCM
    {
        functionObjectLibs    ("libutilityFunctionObjects.so");
        type                  coded;
        name                  postProcessPCM;
        region                PCM;
        enabled               true;
        outputControl         outputTime;//timeStep
        redirectType          postProcessPCM;

        code
        #{
            std::ofstream output;
            output.open("postProcessPCM.txt",std::ofstream::app);



            //- lookup fields
            const volVectorField& U = mesh().lookupObject<volVectorField>("U");
            const volScalarField& T = mesh().lookupObject<volScalarField>("T");
            const volScalarField& Kappa = mesh().lookupObject<volScalarField>("Kappa");
            const volScalarField& mu = mesh().lookupObject<volScalarField>("mu");
            surfaceScalarField gradT = fvc::snGrad(T);


            scalar t_ = U.mesh().time().value();
            scalar deltaT_ = U.mesh().time().deltaT().value();


            //- compute meltinf fraction
            const volScalarField& gamma = mesh().lookupObject<volScalarField>("gamma");
            const scalarField& volumeCell = U.mesh().V();
            scalar meltingFraction = (fvc::domainIntegrate(gamma).value()/sum(volumeCell))*100;


            //- find id and compute heat transfer rate and power density
            label wallID = T.mesh().boundaryMesh().findPatchID("PCM_to_HTF");
            scalar wallArea = sum(T.mesh().magSf().boundaryField()[wallID]);
            scalar wallHeatAvg = sum(Kappa.boundaryField()[wallID]*gradT.boundaryField()[wallID]*T.mesh().magSf().boundaryField()[wallID]);
            scalar powerDensity = wallHeatAvg/sum(volumeCell);



            //- compute entropy generation due to heat transfer and friction
            Info<< "Constructing field Sht\n" << endl;
            volScalarField Sht("Sht", (Kappa/pow(T, 2.0))*(fvc::grad(T) & fvc::grad(T)));
            Sht.write();

            Info<< "Constructing field Sfr\n" << endl;
            volScalarField Sfr("Sfr", (mu/T)*(fvc::grad(U) && fvc::grad(U)));
            Sfr.write();

            scalar entropyGeneration = fvc::domainIntegrate(Sht + Sfr).value();



            output << t_ << "\t\t" << meltingFraction << "\t\t" << powerDensity << "\n";

            output.close();
        #};
    }

);


// ************************************************************************* //
