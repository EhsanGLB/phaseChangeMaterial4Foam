/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | foam-extend: Open Source CFD                    |
|  \\    /   O peration     | Version:     4.1                                |
|   \\  /    A nd           | Web:         http://www.foam-extend.org         |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

libs
(
    "liblduSolvers.so"
    "libPCM4Foam.so"
)

application     chtMultiRegion4PCMFoam;

startFrom       latestTime;

startTime       0;

stopAt          endTime;

endTime         36000;

deltaT          0.1;

writeControl    adjustableRunTime;

writeInterval   600;

purgeWrite      0;

writeFormat     ascii;

writePrecision  7;

writeCompression compressed;

timeFormat      general;

timePrecision   6;

runTimeModifiable yes;

maxDi		0.1;

adjustTimeStep  yes;

maxDeltaT	1.0;

InfoSwitches
{
    writePrecision  6;
    writeJobInfo    0;
    allowSystemOperations 1;
}

functions
(
    postProcessPCM
    {
        functionObjectLibs    ("libutilityFunctionObjects.so");
        type                  coded;
        name                  postProcessPCM;
        region                PCM;
        enabled               true;
        outputControl         outputTime;
        redirectType          postProcessPCM;

        code
        #{
            std::ofstream output;
            output.open("postProcessPCM.txt",std::ofstream::app);

            //- lookup fields
            const volVectorField& U = mesh().lookupObject<volVectorField>("U");
            const volScalarField& gamma = mesh().lookupObject<volScalarField>("gamma");
            const fvMesh& mesh = U.mesh();
            const scalarField& volumeCell = mesh.V();
            scalar meltingFraction = (fvc::domainIntegrate(gamma).value()/sum(volumeCell))*100;

            scalar t_ = U.mesh().time().value();
            scalar deltaT_ = U.mesh().time().deltaT().value();

            output << t_ << "\t\t" << meltingFraction << "\n";
            output.close();

            if(meltingFraction > scalar(99))
            {
                FatalErrorIn("finished") << exit(FatalError);
            }
        #};
    }



    postProcessTEG
    {
        functionObjectLibs    ("libutilityFunctionObjects.so");
        type                  coded;
        name                  postProcessTEG;
        region                TEG;
        enabled               true;
        outputControl         outputTime;
        redirectType          postProcessTEG;

        code
        #{
            std::ofstream output;
            output.open("postProcessTEG.txt",std::ofstream::app);


            wordList TEGPatcheNames(2);
            TEGPatcheNames[0] = "top";
            TEGPatcheNames[1] = "TEG_to_PCM";
            scalar ZT = 1.2;


            //- lookup fields
            const volScalarField& T = mesh().lookupObject<volScalarField>("T");
            const volScalarField& kappa = mesh().lookupObject<volScalarField>("Kappa");
            surfaceScalarField gradT = fvc::snGrad(T);
            const fvMesh& mesh = T.mesh();

            //- compute TEG's efficiency and power
            label patch0ID = mesh.boundaryMesh().findPatchID(TEGPatcheNames[0]);
            scalar patch0Heat = sum(kappa.boundaryField()[patch0ID]*gradT.boundaryField()[patch0ID]*mesh.magSf().boundaryField()[patch0ID]);
            scalar patch0TAvg = sum(T.boundaryField()[patch0ID]*mesh.magSf().boundaryField()[patch0ID])/sum(mesh.magSf().boundaryField()[patch0ID]);

            label patch1ID = mesh.boundaryMesh().findPatchID(TEGPatcheNames[1]);
            scalar patch1Heat = sum(kappa.boundaryField()[patch1ID]*gradT.boundaryField()[patch1ID]*mesh.magSf().boundaryField()[patch1ID]);
            scalar patch1TAvg = sum(T.boundaryField()[patch1ID]*mesh.magSf().boundaryField()[patch1ID])/sum(mesh.magSf().boundaryField()[patch1ID]);

            scalar etaTEG_ = ( (Foam::sqrt(1.0+ZT) - scalar(1.0)) / (Foam::sqrt(1.0+ZT) + (min(patch0TAvg, patch1TAvg)/max(patch0TAvg, patch1TAvg)) ) ) * (mag(patch0TAvg - patch1TAvg)/max(patch0TAvg, patch1TAvg));
            scalar heatTransfer = mag(patch1Heat-patch0Heat);

            scalar P_ = etaTEG_*heatTransfer/sum(mesh.magSf().boundaryField()[patch0ID]);


            //- find id and compute Nusselt number
            label topID = T.mesh().boundaryMesh().findPatchID("top");
            scalar topArea = sum(T.mesh().magSf().boundaryField()[topID]);
            scalar topHeatFluxAvg = sum(kappa.boundaryField()[topID]*gradT.boundaryField()[topID]*T.mesh().magSf().boundaryField()[topID])/topArea;
            scalar avgT_ = sum(T.boundaryField()[topID]*T.mesh().magSf().boundaryField()[topID])/topArea;
            scalar maxT_ = gMax(T.boundaryField()[topID]);


            scalar t_ = T.mesh().time().value();
            scalar deltaT_ = T.mesh().time().deltaT().value();

            output << t_ << "\t\t" << topHeatFluxAvg << "\t\t" << avgT_ << "\t\t" << maxT_ << "\t\t" << etaTEG_ << "\t\t" << P_ << "\n";
            output.close();
        #};
    }

);

// ************************************************************************* //
