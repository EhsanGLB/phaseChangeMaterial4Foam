/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | foam-extend: Open Source CFD                    |
|  \\    /   O peration     | Version:     4.1                                |
|   \\  /    A nd           | Web:         http://www.foam-extend.org         |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

libs
(
    "liblduSolvers.so"
    "libPCM4Foam.so"
)

application     chtMultiRegion4PCMFoam;

startFrom       latestTime;

startTime       0;

stopAt          endTime;

endTime         172800;

deltaT          0.1;

writeControl    adjustableRunTime;

writeInterval   600;

purgeWrite      0;

writeFormat     ascii;

writePrecision  7;

writeCompression compressed;

timeFormat      general;

timePrecision   6;

runTimeModifiable yes;

maxCo           0.7;

maxDi		0.5;

adjustTimeStep  yes;

maxDeltaT	100.0;

InfoSwitches
{
    writePrecision  6;
    writeJobInfo    0;
    allowSystemOperations 1;
}

functions
(
    blockPostProcess
    {
        functionObjectLibs    ("libutilityFunctionObjects.so");
        type                  coded;
        name                  blockPostProcess;
        region                block;
        enabled               true;
        outputControl         outputTime;
        redirectType          blockPostProcess;

        code
        #{
            //- constant values


            //- making a output file
            std::ofstream output;
            output.open("blockPostProcess.txt",std::ofstream::app);


            //- lookup fields
            const volScalarField& T = mesh().lookupObject<volScalarField>("T");
            const volScalarField& kappams = mesh().lookupObject<volScalarField>("kappams");
            surfaceScalarField gradT = fvc::snGrad(T);
            scalar t_ = T.mesh().time().value();
            scalar deltaT_ = T.mesh().time().deltaT().value();


            //- compute friction factor with pressure difference
            label backID_ = T.mesh().boundaryMesh().findPatchID("back");
            label frontID_ = T.mesh().boundaryMesh().findPatchID("front");


            scalar area = sum(T.mesh().magSf().boundaryField()[backID_]);
            scalar Tin = sum(T.boundaryField()[backID_]*T.mesh().magSf().boundaryField()[backID_])/area;
            scalar Tout = sum(T.boundaryField()[frontID_]*T.mesh().magSf().boundaryField()[frontID_])/area;


            //- compute wall heat
            scalar qin = sum(kappams.boundaryField()[backID_]*gradT.boundaryField()[backID_]*T.mesh().magSf().boundaryField()[backID_])/area;
            scalar qout = sum(kappams.boundaryField()[frontID_]*gradT.boundaryField()[frontID_]*T.mesh().magSf().boundaryField()[frontID_])/area;


            //- Print data
            Info << "Tin: " << Tin << endl;
            Info << "Tout: " << Tout << endl;
            Info << "qin: " << qin << endl;
            Info << "qout: " << qout << endl;
            Info << endl;

            if (t_>86300)
            {
                output << (t_-86400)/3600 << "\t" << (Tin-273) << "\t" << (Tout-273) << "\t" << qin << "\t" << qout << "\n";
            }
            output.close();
        #};
    }
);
// ************************************************************************* //
