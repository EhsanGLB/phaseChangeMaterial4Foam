/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | foam-extend: Open Source CFD                    |
|  \\    /   O peration     | Version:     4.1                                |
|   \\  /    A nd           | Web:         http://www.foam-extend.org         |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

libs
(
    "liblduSolvers.so"
    "libPCM4Foam.so"
)

application     chtMultiRegion4PCMFoam;

startFrom       latestTime;

startTime       0;

stopAt          endTime;

endTime         43200;

deltaT          0.1;

writeControl    adjustableRunTime;

writeInterval   3600;

purgeWrite      0;

writeFormat     ascii;

writePrecision  7;

writeCompression compressed;

timeFormat      general;

timePrecision   6;

runTimeModifiable yes;

maxCo           0.7;

maxDi		0.1;

adjustTimeStep  yes;

maxDeltaT	1.0;

InfoSwitches
{
    writePrecision  6;
    writeJobInfo    0;
    allowSystemOperations 1;
}

functions
(
    postProcessPCM
    {
        functionObjectLibs    ("libutilityFunctionObjects.so");
        type                  coded;
        name                  postProcessPCM;
        region                PCM;
        enabled               true;
        outputControl         outputTime;
        redirectType          postProcessPCM;

        code
        #{
            std::ofstream output;
            output.open("postProcessPCM.txt",std::ofstream::app);

            //- lookup fields
            const volVectorField& U = mesh().lookupObject<volVectorField>("U");
            const volScalarField& gamma = mesh().lookupObject<volScalarField>("gamma");
            const fvMesh& mesh = U.mesh();
            const scalarField& volumeCell = mesh.V();
            scalar meltingFraction = (fvc::domainIntegrate(gamma).value()/sum(volumeCell))*100;

            scalar t_ = U.mesh().time().value();
            scalar deltaT_ = U.mesh().time().deltaT().value();

            output << t_ << "\t\t" << meltingFraction << "\n";

            output.close();

            if(meltingFraction > scalar(99))
            {
                FatalErrorIn("finished") << exit(FatalError);
            }
        #};
    }
);


// ************************************************************************* //
